/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm;


import com.kenvix.bookmgr.orm.tables.Author;
import com.kenvix.bookmgr.orm.tables.Book;
import com.kenvix.bookmgr.orm.tables.BookAuthorMap;
import com.kenvix.bookmgr.orm.tables.BookBorrow;
import com.kenvix.bookmgr.orm.tables.BookStatus;
import com.kenvix.bookmgr.orm.tables.BookType;
import com.kenvix.bookmgr.orm.tables.Invoice;
import com.kenvix.bookmgr.orm.tables.InvoicePenalty;
import com.kenvix.bookmgr.orm.tables.InvoiceStatus;
import com.kenvix.bookmgr.orm.tables.InvoiceType;
import com.kenvix.bookmgr.orm.tables.LogCardAccess;
import com.kenvix.bookmgr.orm.tables.LogSystem;
import com.kenvix.bookmgr.orm.tables.LogUserLogin;
import com.kenvix.bookmgr.orm.tables.Publisher;
import com.kenvix.bookmgr.orm.tables.Setting;
import com.kenvix.bookmgr.orm.tables.TaskQueue;
import com.kenvix.bookmgr.orm.tables.User;
import com.kenvix.bookmgr.orm.tables.UserAccessLevel;
import com.kenvix.bookmgr.orm.tables.UserExtra;
import com.kenvix.bookmgr.orm.tables.records.AuthorRecord;
import com.kenvix.bookmgr.orm.tables.records.BookAuthorMapRecord;
import com.kenvix.bookmgr.orm.tables.records.BookBorrowRecord;
import com.kenvix.bookmgr.orm.tables.records.BookRecord;
import com.kenvix.bookmgr.orm.tables.records.BookStatusRecord;
import com.kenvix.bookmgr.orm.tables.records.BookTypeRecord;
import com.kenvix.bookmgr.orm.tables.records.InvoicePenaltyRecord;
import com.kenvix.bookmgr.orm.tables.records.InvoiceRecord;
import com.kenvix.bookmgr.orm.tables.records.InvoiceStatusRecord;
import com.kenvix.bookmgr.orm.tables.records.InvoiceTypeRecord;
import com.kenvix.bookmgr.orm.tables.records.LogCardAccessRecord;
import com.kenvix.bookmgr.orm.tables.records.LogSystemRecord;
import com.kenvix.bookmgr.orm.tables.records.LogUserLoginRecord;
import com.kenvix.bookmgr.orm.tables.records.PublisherRecord;
import com.kenvix.bookmgr.orm.tables.records.SettingRecord;
import com.kenvix.bookmgr.orm.tables.records.TaskQueueRecord;
import com.kenvix.bookmgr.orm.tables.records.UserAccessLevelRecord;
import com.kenvix.bookmgr.orm.tables.records.UserExtraRecord;
import com.kenvix.bookmgr.orm.tables.records.UserRecord;

import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * the default schema.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("KEY_author_PRIMARY"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = Internal.createUniqueKey(Book.BOOK, DSL.name("KEY_book_PRIMARY"), new TableField[] { Book.BOOK.ID }, true);
    public static final UniqueKey<BookAuthorMapRecord> KEY_BOOK_AUTHOR_MAP_PRIMARY = Internal.createUniqueKey(BookAuthorMap.BOOK_AUTHOR_MAP, DSL.name("KEY_book_author_map_PRIMARY"), new TableField[] { BookAuthorMap.BOOK_AUTHOR_MAP.BOOK_ID, BookAuthorMap.BOOK_AUTHOR_MAP.AUTHOR_ID }, true);
    public static final UniqueKey<BookBorrowRecord> KEY_BOOK_BORROW_PRIMARY = Internal.createUniqueKey(BookBorrow.BOOK_BORROW, DSL.name("KEY_book_borrow_PRIMARY"), new TableField[] { BookBorrow.BOOK_BORROW.ID }, true);
    public static final UniqueKey<BookStatusRecord> KEY_BOOK_STATUS_PRIMARY = Internal.createUniqueKey(BookStatus.BOOK_STATUS, DSL.name("KEY_book_status_PRIMARY"), new TableField[] { BookStatus.BOOK_STATUS.ID }, true);
    public static final UniqueKey<BookTypeRecord> KEY_BOOK_TYPE_PRIMARY = Internal.createUniqueKey(BookType.BOOK_TYPE, DSL.name("KEY_book_type_PRIMARY"), new TableField[] { BookType.BOOK_TYPE.ID }, true);
    public static final UniqueKey<InvoiceRecord> KEY_INVOICE_PRIMARY = Internal.createUniqueKey(Invoice.INVOICE, DSL.name("KEY_invoice_PRIMARY"), new TableField[] { Invoice.INVOICE.ID }, true);
    public static final UniqueKey<InvoicePenaltyRecord> KEY_INVOICE_PENALTY_PRIMARY = Internal.createUniqueKey(InvoicePenalty.INVOICE_PENALTY, DSL.name("KEY_invoice_penalty_PRIMARY"), new TableField[] { InvoicePenalty.INVOICE_PENALTY.ID }, true);
    public static final UniqueKey<InvoiceStatusRecord> KEY_INVOICE_STATUS_PRIMARY = Internal.createUniqueKey(InvoiceStatus.INVOICE_STATUS, DSL.name("KEY_invoice_status_PRIMARY"), new TableField[] { InvoiceStatus.INVOICE_STATUS.ID }, true);
    public static final UniqueKey<InvoiceTypeRecord> KEY_INVOICE_TYPE_PRIMARY = Internal.createUniqueKey(InvoiceType.INVOICE_TYPE, DSL.name("KEY_invoice_type_PRIMARY"), new TableField[] { InvoiceType.INVOICE_TYPE.ID }, true);
    public static final UniqueKey<LogCardAccessRecord> KEY_LOG_CARD_ACCESS_PRIMARY = Internal.createUniqueKey(LogCardAccess.LOG_CARD_ACCESS, DSL.name("KEY_log_card_access_PRIMARY"), new TableField[] { LogCardAccess.LOG_CARD_ACCESS.ID }, true);
    public static final UniqueKey<LogSystemRecord> KEY_LOG_SYSTEM_PRIMARY = Internal.createUniqueKey(LogSystem.LOG_SYSTEM, DSL.name("KEY_log_system_PRIMARY"), new TableField[] { LogSystem.LOG_SYSTEM.ID }, true);
    public static final UniqueKey<LogUserLoginRecord> KEY_LOG_USER_LOGIN_PRIMARY = Internal.createUniqueKey(LogUserLogin.LOG_USER_LOGIN, DSL.name("KEY_log_user_login_PRIMARY"), new TableField[] { LogUserLogin.LOG_USER_LOGIN.ID }, true);
    public static final UniqueKey<PublisherRecord> KEY_PUBLISHER_PRIMARY = Internal.createUniqueKey(Publisher.PUBLISHER, DSL.name("KEY_publisher_PRIMARY"), new TableField[] { Publisher.PUBLISHER.ID }, true);
    public static final UniqueKey<PublisherRecord> KEY_PUBLISHER_UNIQUE_NAME = Internal.createUniqueKey(Publisher.PUBLISHER, DSL.name("KEY_publisher_unique_name"), new TableField[] { Publisher.PUBLISHER.NAME }, true);
    public static final UniqueKey<SettingRecord> KEY_SETTING_PRIMARY = Internal.createUniqueKey(Setting.SETTING, DSL.name("KEY_setting_PRIMARY"), new TableField[] { Setting.SETTING.KEY }, true);
    public static final UniqueKey<TaskQueueRecord> KEY_TASK_QUEUE_PRIMARY = Internal.createUniqueKey(TaskQueue.TASK_QUEUE, DSL.name("KEY_task_queue_PRIMARY"), new TableField[] { TaskQueue.TASK_QUEUE.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.UID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_UNIQUE_EMAIL = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_unique_email"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> KEY_USER_UNIQUE_SERIAL_ID = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_unique_serial_id"), new TableField[] { User.USER.SERIAL_ID }, true);
    public static final UniqueKey<UserAccessLevelRecord> KEY_USER_ACCESS_LEVEL_PRIMARY = Internal.createUniqueKey(UserAccessLevel.USER_ACCESS_LEVEL, DSL.name("KEY_user_access_level_PRIMARY"), new TableField[] { UserAccessLevel.USER_ACCESS_LEVEL.ID }, true);
    public static final UniqueKey<UserExtraRecord> KEY_USER_EXTRA_PRIMARY = Internal.createUniqueKey(UserExtra.USER_EXTRA, DSL.name("KEY_user_extra_PRIMARY"), new TableField[] { UserExtra.USER_EXTRA.UID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookRecord, BookStatusRecord> FK_BOOK_STATUS = Internal.createForeignKey(Book.BOOK, DSL.name("fk_book_status"), new TableField[] { Book.BOOK.STATUS }, Keys.KEY_BOOK_STATUS_PRIMARY, new TableField[] { BookStatus.BOOK_STATUS.ID }, true);
    public static final ForeignKey<BookRecord, BookTypeRecord> FK_BOOK_TYPE_ID = Internal.createForeignKey(Book.BOOK, DSL.name("fk_book_type_id"), new TableField[] { Book.BOOK.TYPE_ID }, Keys.KEY_BOOK_TYPE_PRIMARY, new TableField[] { BookType.BOOK_TYPE.ID }, true);
    public static final ForeignKey<BookRecord, UserRecord> FK_CREATOR_UID = Internal.createForeignKey(Book.BOOK, DSL.name("fk_creator_uid"), new TableField[] { Book.BOOK.CREATOR_UID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<BookRecord, PublisherRecord> FK_PUBLISHER_ID = Internal.createForeignKey(Book.BOOK, DSL.name("fk_publisher_id"), new TableField[] { Book.BOOK.PUBLISHER_ID }, Keys.KEY_PUBLISHER_PRIMARY, new TableField[] { Publisher.PUBLISHER.ID }, true);
    public static final ForeignKey<BookAuthorMapRecord, AuthorRecord> FK_BOOK_AUTHOR_MAP_AUTHOR_ID = Internal.createForeignKey(BookAuthorMap.BOOK_AUTHOR_MAP, DSL.name("fk_book_author_map_author_id"), new TableField[] { BookAuthorMap.BOOK_AUTHOR_MAP.AUTHOR_ID }, Keys.KEY_AUTHOR_PRIMARY, new TableField[] { Author.AUTHOR.ID }, true);
    public static final ForeignKey<BookAuthorMapRecord, BookRecord> FK_BOOK_AUTHOR_MAP_BOOK_ID = Internal.createForeignKey(BookAuthorMap.BOOK_AUTHOR_MAP, DSL.name("fk_book_author_map_book_id"), new TableField[] { BookAuthorMap.BOOK_AUTHOR_MAP.BOOK_ID }, Keys.KEY_BOOK_PRIMARY, new TableField[] { Book.BOOK.ID }, true);
    public static final ForeignKey<BookBorrowRecord, BookRecord> FK_BOOK_ID = Internal.createForeignKey(BookBorrow.BOOK_BORROW, DSL.name("fk_book_id"), new TableField[] { BookBorrow.BOOK_BORROW.BOOK_ID }, Keys.KEY_BOOK_PRIMARY, new TableField[] { Book.BOOK.ID }, true);
    public static final ForeignKey<BookBorrowRecord, UserRecord> FK_BORROWER_UID = Internal.createForeignKey(BookBorrow.BOOK_BORROW, DSL.name("fk_borrower_uid"), new TableField[] { BookBorrow.BOOK_BORROW.BORROWER_UID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<BookTypeRecord, BookTypeRecord> FK_BOOK_TYPE_PARENT_ID = Internal.createForeignKey(BookType.BOOK_TYPE, DSL.name("fk_book_type_parent_id"), new TableField[] { BookType.BOOK_TYPE.PARENT_ID }, Keys.KEY_BOOK_TYPE_PRIMARY, new TableField[] { BookType.BOOK_TYPE.ID }, true);
    public static final ForeignKey<InvoiceRecord, InvoiceStatusRecord> FK_INVOCIE_STATUS = Internal.createForeignKey(Invoice.INVOICE, DSL.name("fk_invocie_status"), new TableField[] { Invoice.INVOICE.STATUS }, Keys.KEY_INVOICE_STATUS_PRIMARY, new TableField[] { InvoiceStatus.INVOICE_STATUS.ID }, true);
    public static final ForeignKey<InvoiceRecord, UserRecord> FK_OWNER_UID = Internal.createForeignKey(Invoice.INVOICE, DSL.name("fk_owner_uid"), new TableField[] { Invoice.INVOICE.OWNER_UID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.UID }, true);
    public static final ForeignKey<InvoiceRecord, InvoiceTypeRecord> FK_TYPE = Internal.createForeignKey(Invoice.INVOICE, DSL.name("fk_type"), new TableField[] { Invoice.INVOICE.TYPE }, Keys.KEY_INVOICE_TYPE_PRIMARY, new TableField[] { InvoiceType.INVOICE_TYPE.ID }, true);
    public static final ForeignKey<InvoicePenaltyRecord, BookRecord> FK_BOOK_ID_INVOICE_PENALTY = Internal.createForeignKey(InvoicePenalty.INVOICE_PENALTY, DSL.name("fk_book_id_invoice_penalty"), new TableField[] { InvoicePenalty.INVOICE_PENALTY.BOOK_ID }, Keys.KEY_BOOK_PRIMARY, new TableField[] { Book.BOOK.ID }, true);
    public static final ForeignKey<InvoicePenaltyRecord, InvoiceRecord> FK_INVOICE_ID_INVOICE_PENALTY = Internal.createForeignKey(InvoicePenalty.INVOICE_PENALTY, DSL.name("fk_invoice_id_invoice_penalty"), new TableField[] { InvoicePenalty.INVOICE_PENALTY.INVOICE_ID }, Keys.KEY_INVOICE_PRIMARY, new TableField[] { Invoice.INVOICE.ID }, true);
    public static final ForeignKey<UserRecord, UserAccessLevelRecord> FK_ACCESS_LEVEL = Internal.createForeignKey(User.USER, DSL.name("fk_access_level"), new TableField[] { User.USER.ACCESS_LEVEL }, Keys.KEY_USER_ACCESS_LEVEL_PRIMARY, new TableField[] { UserAccessLevel.USER_ACCESS_LEVEL.ID }, true);
    public static final ForeignKey<UserExtraRecord, UserRecord> FK_UID = Internal.createForeignKey(UserExtra.USER_EXTRA, DSL.name("fk_uid"), new TableField[] { UserExtra.USER_EXTRA.UID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.UID }, true);
}
