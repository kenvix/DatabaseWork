/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.Indexes;
import com.kenvix.bookmgr.orm.Keys;
import com.kenvix.bookmgr.orm.tables.records.TaskQueueRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 任务队列（程序可读）
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskQueue extends TableImpl<TaskQueueRecord> {

    private static final long serialVersionUID = 1402307679;

    /**
     * The reference instance of <code>task_queue</code>
     */
    public static final TaskQueue TASK_QUEUE = new TaskQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskQueueRecord> getRecordType() {
        return TaskQueueRecord.class;
    }

    /**
     * The column <code>task_queue.id</code>.
     */
    public final TableField<TaskQueueRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>task_queue.created_at</code>.
     */
    public final TableField<TaskQueueRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>task_queue.finished_at</code>.
     */
    public final TableField<TaskQueueRecord, Timestamp> FINISHED_AT = createField(DSL.name("finished_at"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>task_queue.is_finished</code>.
     */
    public final TableField<TaskQueueRecord, Boolean> IS_FINISHED = createField(DSL.name("is_finished"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>task_queue.is_success</code>.
     */
    public final TableField<TaskQueueRecord, Boolean> IS_SUCCESS = createField(DSL.name("is_success"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>task_queue.is_doing</code>.
     */
    public final TableField<TaskQueueRecord, Boolean> IS_DOING = createField(DSL.name("is_doing"), org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>task_queue.type</code>.
     */
    public final TableField<TaskQueueRecord, Short> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>task_queue.content</code>. 任务正文（程序可读）
     */
    public final TableField<TaskQueueRecord, JSON> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.JSON, this, "任务正文（程序可读）");

    /**
     * The column <code>task_queue.result</code>. 任务结果（程序可读）
     */
    public final TableField<TaskQueueRecord, JSON> RESULT = createField(DSL.name("result"), org.jooq.impl.SQLDataType.JSON, this, "任务结果（程序可读）");

    /**
     * Create a <code>task_queue</code> table reference
     */
    public TaskQueue() {
        this(DSL.name("task_queue"), null);
    }

    /**
     * Create an aliased <code>task_queue</code> table reference
     */
    public TaskQueue(String alias) {
        this(DSL.name(alias), TASK_QUEUE);
    }

    /**
     * Create an aliased <code>task_queue</code> table reference
     */
    public TaskQueue(Name alias) {
        this(alias, TASK_QUEUE);
    }

    private TaskQueue(Name alias, Table<TaskQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskQueue(Name alias, Table<TaskQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("任务队列（程序可读）"), TableOptions.table());
    }

    public <O extends Record> TaskQueue(Table<O> child, ForeignKey<O, TaskQueueRecord> key) {
        super(child, key, TASK_QUEUE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_QUEUE_INDEX_TASK);
    }

    @Override
    public Identity<TaskQueueRecord, Long> getIdentity() {
        return Keys.IDENTITY_TASK_QUEUE;
    }

    @Override
    public UniqueKey<TaskQueueRecord> getPrimaryKey() {
        return Keys.KEY_TASK_QUEUE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TaskQueueRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskQueueRecord>>asList(Keys.KEY_TASK_QUEUE_PRIMARY);
    }

    @Override
    public TaskQueue as(String alias) {
        return new TaskQueue(DSL.name(alias), this);
    }

    @Override
    public TaskQueue as(Name alias) {
        return new TaskQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskQueue rename(String name) {
        return new TaskQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskQueue rename(Name name) {
        return new TaskQueue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Timestamp, Timestamp, Boolean, Boolean, Boolean, Short, JSON, JSON> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
