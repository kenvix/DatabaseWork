/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables.records;


import com.kenvix.bookmgr.orm.tables.Book;
import com.kenvix.bookmgr.orm.tables.interfaces.IBook;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 书籍表
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookRecord extends UpdatableRecordImpl<BookRecord> implements Record9<Long, Long, String, String, Long, Timestamp, Integer, Integer, Byte>, IBook {

    private static final long serialVersionUID = -45002464;

    /**
     * Setter for <code>book.id</code>. 书本ID
     */
    @Override
    public BookRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>book.id</code>. 书本ID
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>book.creator_uid</code>. 条目创建者UID
     */
    @Override
    public BookRecord setCreatorUid(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>book.creator_uid</code>. 条目创建者UID
     */
    @Override
    public Long getCreatorUid() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>book.title</code>. 书籍标题
     */
    @Override
    public BookRecord setTitle(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>book.title</code>. 书籍标题
     */
    @Override
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>book.description</code>. 书籍概述
     */
    @Override
    public BookRecord setDescription(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>book.description</code>. 书籍概述
     */
    @Override
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>book.publisher_id</code>. 出版社ID
     */
    @Override
    public BookRecord setPublisherId(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>book.publisher_id</code>. 出版社ID
     */
    @Override
    public Long getPublisherId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>book.created_at</code>. 条目创建时间
     */
    @Override
    public BookRecord setCreatedAt(Timestamp value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>book.created_at</code>. 条目创建时间
     */
    @Override
    public Timestamp getCreatedAt() {
        return (Timestamp) get(5);
    }

    /**
     * Setter for <code>book.num_total</code>. 书籍总数
     */
    @Override
    public BookRecord setNumTotal(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>book.num_total</code>. 书籍总数
     */
    @Override
    public Integer getNumTotal() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>book.num_available</code>. 可用书籍数
     */
    @Override
    public BookRecord setNumAvailable(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>book.num_available</code>. 可用书籍数
     */
    @Override
    public Integer getNumAvailable() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>book.status</code>. 书籍状态
     */
    @Override
    public BookRecord setStatus(Byte value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>book.status</code>. 书籍状态
     */
    @Override
    public Byte getStatus() {
        return (Byte) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, String, String, Long, Timestamp, Integer, Integer, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Long, String, String, Long, Timestamp, Integer, Integer, Byte> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Book.BOOK.ID;
    }

    @Override
    public Field<Long> field2() {
        return Book.BOOK.CREATOR_UID;
    }

    @Override
    public Field<String> field3() {
        return Book.BOOK.TITLE;
    }

    @Override
    public Field<String> field4() {
        return Book.BOOK.DESCRIPTION;
    }

    @Override
    public Field<Long> field5() {
        return Book.BOOK.PUBLISHER_ID;
    }

    @Override
    public Field<Timestamp> field6() {
        return Book.BOOK.CREATED_AT;
    }

    @Override
    public Field<Integer> field7() {
        return Book.BOOK.NUM_TOTAL;
    }

    @Override
    public Field<Integer> field8() {
        return Book.BOOK.NUM_AVAILABLE;
    }

    @Override
    public Field<Byte> field9() {
        return Book.BOOK.STATUS;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getCreatorUid();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public Long component5() {
        return getPublisherId();
    }

    @Override
    public Timestamp component6() {
        return getCreatedAt();
    }

    @Override
    public Integer component7() {
        return getNumTotal();
    }

    @Override
    public Integer component8() {
        return getNumAvailable();
    }

    @Override
    public Byte component9() {
        return getStatus();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getCreatorUid();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public Long value5() {
        return getPublisherId();
    }

    @Override
    public Timestamp value6() {
        return getCreatedAt();
    }

    @Override
    public Integer value7() {
        return getNumTotal();
    }

    @Override
    public Integer value8() {
        return getNumAvailable();
    }

    @Override
    public Byte value9() {
        return getStatus();
    }

    @Override
    public BookRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public BookRecord value2(Long value) {
        setCreatorUid(value);
        return this;
    }

    @Override
    public BookRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public BookRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public BookRecord value5(Long value) {
        setPublisherId(value);
        return this;
    }

    @Override
    public BookRecord value6(Timestamp value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public BookRecord value7(Integer value) {
        setNumTotal(value);
        return this;
    }

    @Override
    public BookRecord value8(Integer value) {
        setNumAvailable(value);
        return this;
    }

    @Override
    public BookRecord value9(Byte value) {
        setStatus(value);
        return this;
    }

    @Override
    public BookRecord values(Long value1, Long value2, String value3, String value4, Long value5, Timestamp value6, Integer value7, Integer value8, Byte value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IBook from) {
        setId(from.getId());
        setCreatorUid(from.getCreatorUid());
        setTitle(from.getTitle());
        setDescription(from.getDescription());
        setPublisherId(from.getPublisherId());
        setCreatedAt(from.getCreatedAt());
        setNumTotal(from.getNumTotal());
        setNumAvailable(from.getNumAvailable());
        setStatus(from.getStatus());
    }

    @Override
    public <E extends IBook> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookRecord
     */
    public BookRecord() {
        super(Book.BOOK);
    }

    /**
     * Create a detached, initialised BookRecord
     */
    public BookRecord(Long id, Long creatorUid, String title, String description, Long publisherId, Timestamp createdAt, Integer numTotal, Integer numAvailable, Byte status) {
        super(Book.BOOK);

        set(0, id);
        set(1, creatorUid);
        set(2, title);
        set(3, description);
        set(4, publisherId);
        set(5, createdAt);
        set(6, numTotal);
        set(7, numAvailable);
        set(8, status);
    }
}
