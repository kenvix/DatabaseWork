/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables.records;


import com.kenvix.bookmgr.orm.tables.Setting;
import com.kenvix.bookmgr.orm.tables.interfaces.ISetting;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 设置表
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SettingRecord extends UpdatableRecordImpl<SettingRecord> implements Record4<String, String, String, String>, ISetting {

    private static final long serialVersionUID = 77372381;

    /**
     * Setter for <code>setting.key</code>.
     */
    @Override
    public SettingRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>setting.key</code>.
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>setting.value</code>.
     */
    @Override
    public SettingRecord setValue(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>setting.value</code>.
     */
    @Override
    public String getValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>setting.description</code>.
     */
    @Override
    public SettingRecord setDescription(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>setting.description</code>.
     */
    @Override
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>setting.type</code>. 类型
     */
    @Override
    public SettingRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>setting.type</code>. 类型
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Setting.SETTING.KEY;
    }

    @Override
    public Field<String> field2() {
        return Setting.SETTING.VALUE;
    }

    @Override
    public Field<String> field3() {
        return Setting.SETTING.DESCRIPTION;
    }

    @Override
    public Field<String> field4() {
        return Setting.SETTING.TYPE;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getValue();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getValue();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public SettingRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public SettingRecord value2(String value) {
        setValue(value);
        return this;
    }

    @Override
    public SettingRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public SettingRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public SettingRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ISetting from) {
        setKey(from.getKey());
        setValue(from.getValue());
        setDescription(from.getDescription());
        setType(from.getType());
    }

    @Override
    public <E extends ISetting> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SettingRecord
     */
    public SettingRecord() {
        super(Setting.SETTING);
    }

    /**
     * Create a detached, initialised SettingRecord
     */
    public SettingRecord(String key, String value, String description, String type) {
        super(Setting.SETTING);

        set(0, key);
        set(1, value);
        set(2, description);
        set(3, type);
    }
}
