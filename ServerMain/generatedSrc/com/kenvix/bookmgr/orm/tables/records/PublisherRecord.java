/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables.records;


import com.kenvix.bookmgr.orm.tables.Publisher;
import com.kenvix.bookmgr.orm.tables.interfaces.IPublisher;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 出版社
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublisherRecord extends UpdatableRecordImpl<PublisherRecord> implements Record3<Long, String, String>, IPublisher {

    private static final long serialVersionUID = 251790324;

    /**
     * Setter for <code>publisher.id</code>. 出版社ID
     */
    @Override
    public PublisherRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>publisher.id</code>. 出版社ID
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>publisher.name</code>. 出版社名称
     */
    @Override
    public PublisherRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>publisher.name</code>. 出版社名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>publisher.description</code>. 出版社简介
     */
    @Override
    public PublisherRecord setDescription(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>publisher.description</code>. 出版社简介
     */
    @Override
    public String getDescription() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Publisher.PUBLISHER.ID;
    }

    @Override
    public Field<String> field2() {
        return Publisher.PUBLISHER.NAME;
    }

    @Override
    public Field<String> field3() {
        return Publisher.PUBLISHER.DESCRIPTION;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public PublisherRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public PublisherRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public PublisherRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public PublisherRecord values(Long value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IPublisher from) {
        setId(from.getId());
        setName(from.getName());
        setDescription(from.getDescription());
    }

    @Override
    public <E extends IPublisher> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PublisherRecord
     */
    public PublisherRecord() {
        super(Publisher.PUBLISHER);
    }

    /**
     * Create a detached, initialised PublisherRecord
     */
    public PublisherRecord(Long id, String name, String description) {
        super(Publisher.PUBLISHER);

        set(0, id);
        set(1, name);
        set(2, description);
    }
}
