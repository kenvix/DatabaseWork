/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables.records;


import com.kenvix.bookmgr.orm.tables.BookType;
import com.kenvix.bookmgr.orm.tables.interfaces.IBookType;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 图书类目
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookTypeRecord extends UpdatableRecordImpl<BookTypeRecord> implements Record3<Integer, String, Integer>, IBookType {

    private static final long serialVersionUID = -1725463125;

    /**
     * Setter for <code>book_type.id</code>. 图书类目ID
     */
    @Override
    public BookTypeRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>book_type.id</code>. 图书类目ID
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>book_type.name</code>. 类目名称
     */
    @Override
    public BookTypeRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>book_type.name</code>. 类目名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>book_type.parent_id</code>. 父级图书类目ID
     */
    @Override
    public BookTypeRecord setParentId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>book_type.parent_id</code>. 父级图书类目ID
     */
    @Override
    public Integer getParentId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return BookType.BOOK_TYPE.ID;
    }

    @Override
    public Field<String> field2() {
        return BookType.BOOK_TYPE.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return BookType.BOOK_TYPE.PARENT_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getParentId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getParentId();
    }

    @Override
    public BookTypeRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public BookTypeRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public BookTypeRecord value3(Integer value) {
        setParentId(value);
        return this;
    }

    @Override
    public BookTypeRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IBookType from) {
        setId(from.getId());
        setName(from.getName());
        setParentId(from.getParentId());
    }

    @Override
    public <E extends IBookType> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookTypeRecord
     */
    public BookTypeRecord() {
        super(BookType.BOOK_TYPE);
    }

    /**
     * Create a detached, initialised BookTypeRecord
     */
    public BookTypeRecord(Integer id, String name, Integer parentId) {
        super(BookType.BOOK_TYPE);

        set(0, id);
        set(1, name);
        set(2, parentId);
    }
}
