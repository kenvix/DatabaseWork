/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.tables.records.LogUserLoginForAdminRecord;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogUserLoginForAdmin extends TableImpl<LogUserLoginForAdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>log_user_login_for_admin</code>
     */
    public static final LogUserLoginForAdmin LOG_USER_LOGIN_FOR_ADMIN = new LogUserLoginForAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogUserLoginForAdminRecord> getRecordType() {
        return LogUserLoginForAdminRecord.class;
    }

    /**
     * The column <code>log_user_login_for_admin.created_at</code>. 创建时间
     */
    public final TableField<LogUserLoginForAdminRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>log_user_login_for_admin.access_level</code>. 访问级别
     */
    public final TableField<LogUserLoginForAdminRecord, Byte> ACCESS_LEVEL = createField(DSL.name("access_level"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "访问级别");

    /**
     * The column <code>log_user_login_for_admin.real_name</code>. 真实姓名
     */
    public final TableField<LogUserLoginForAdminRecord, String> REAL_NAME = createField(DSL.name("real_name"), SQLDataType.VARCHAR(30).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "真实姓名");

    /**
     * The column <code>log_user_login_for_admin.email</code>. 电子邮箱
     */
    public final TableField<LogUserLoginForAdminRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(60).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "电子邮箱");

    /**
     * The column <code>log_user_login_for_admin.serial_id</code>. 工号/序列号
     */
    public final TableField<LogUserLoginForAdminRecord, String> SERIAL_ID = createField(DSL.name("serial_id"), SQLDataType.VARCHAR(15).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "工号/序列号");

    /**
     * The column <code>log_user_login_for_admin.uid</code>. 用户UID
     */
    public final TableField<LogUserLoginForAdminRecord, Long> UID = createField(DSL.name("uid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "用户UID");

    /**
     * The column <code>log_user_login_for_admin.ip</code>. 登录IP
     */
    public final TableField<LogUserLoginForAdminRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(45).nullable(false), this, "登录IP");

    /**
     * The column <code>log_user_login_for_admin.time</code>. 登录时间
     */
    public final TableField<LogUserLoginForAdminRecord, Timestamp> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMP(0).nullable(false), this, "登录时间");

    /**
     * The column <code>log_user_login_for_admin.useragent</code>. 用户代理
     */
    public final TableField<LogUserLoginForAdminRecord, String> USERAGENT = createField(DSL.name("useragent"), SQLDataType.CLOB, this, "用户代理");

    private LogUserLoginForAdmin(Name alias, Table<LogUserLoginForAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogUserLoginForAdmin(Name alias, Table<LogUserLoginForAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `log_user_login_for_admin` as "));
    }

    /**
     * Create an aliased <code>log_user_login_for_admin</code> table reference
     */
    public LogUserLoginForAdmin(String alias) {
        this(DSL.name(alias), LOG_USER_LOGIN_FOR_ADMIN);
    }

    /**
     * Create an aliased <code>log_user_login_for_admin</code> table reference
     */
    public LogUserLoginForAdmin(Name alias) {
        this(alias, LOG_USER_LOGIN_FOR_ADMIN);
    }

    /**
     * Create a <code>log_user_login_for_admin</code> table reference
     */
    public LogUserLoginForAdmin() {
        this(DSL.name("log_user_login_for_admin"), null);
    }

    public <O extends Record> LogUserLoginForAdmin(Table<O> child, ForeignKey<O, LogUserLoginForAdminRecord> key) {
        super(child, key, LOG_USER_LOGIN_FOR_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public LogUserLoginForAdmin as(String alias) {
        return new LogUserLoginForAdmin(DSL.name(alias), this);
    }

    @Override
    public LogUserLoginForAdmin as(Name alias) {
        return new LogUserLoginForAdmin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogUserLoginForAdmin rename(String name) {
        return new LogUserLoginForAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogUserLoginForAdmin rename(Name name) {
        return new LogUserLoginForAdmin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Timestamp, Byte, String, String, String, Long, String, Timestamp, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
