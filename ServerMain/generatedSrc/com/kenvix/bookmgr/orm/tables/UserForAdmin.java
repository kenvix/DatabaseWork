/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.tables.records.UserForAdminRecord;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserForAdmin extends TableImpl<UserForAdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_for_admin</code>
     */
    public static final UserForAdmin USER_FOR_ADMIN = new UserForAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserForAdminRecord> getRecordType() {
        return UserForAdminRecord.class;
    }

    /**
     * The column <code>user_for_admin.uid</code>. 用户UID
     */
    public final TableField<UserForAdminRecord, Long> UID = createField(DSL.name("uid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "用户UID");

    /**
     * The column <code>user_for_admin.serial_id</code>. 工号/序列号
     */
    public final TableField<UserForAdminRecord, String> SERIAL_ID = createField(DSL.name("serial_id"), SQLDataType.VARCHAR(15).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "工号/序列号");

    /**
     * The column <code>user_for_admin.email</code>. 电子邮箱
     */
    public final TableField<UserForAdminRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(60).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "电子邮箱");

    /**
     * The column <code>user_for_admin.real_name</code>. 真实姓名
     */
    public final TableField<UserForAdminRecord, String> REAL_NAME = createField(DSL.name("real_name"), SQLDataType.VARCHAR(30).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "真实姓名");

    /**
     * The column <code>user_for_admin.password</code>. Bcrypt密码哈希值
     */
    public final TableField<UserForAdminRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "Bcrypt密码哈希值");

    /**
     * The column <code>user_for_admin.access_level</code>. 访问级别
     */
    public final TableField<UserForAdminRecord, Byte> ACCESS_LEVEL = createField(DSL.name("access_level"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "访问级别");

    /**
     * The column <code>user_for_admin.access_level_description</code>.
     */
    public final TableField<UserForAdminRecord, String> ACCESS_LEVEL_DESCRIPTION = createField(DSL.name("access_level_description"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>user_for_admin.created_at</code>. 创建时间
     */
    public final TableField<UserForAdminRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>user_for_admin.phone</code>. 电话号
     */
    public final TableField<UserForAdminRecord, Long> PHONE = createField(DSL.name("phone"), SQLDataType.BIGINT, this, "电话号");

    /**
     * The column <code>user_for_admin.money</code>. 可用钱数（单位为分）
     */
    public final TableField<UserForAdminRecord, Integer> MONEY = createField(DSL.name("money"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "可用钱数（单位为分）");

    /**
     * The column <code>user_for_admin.card_serial_id</code>. 卡片序列号
     */
    public final TableField<UserForAdminRecord, Long> CARD_SERIAL_ID = createField(DSL.name("card_serial_id"), SQLDataType.BIGINT, this, "卡片序列号");

    /**
     * The column <code>user_for_admin.start_year</code>. 入学(职)年份
     */
    public final TableField<UserForAdminRecord, Short> START_YEAR = createField(DSL.name("start_year"), SQLDataType.SMALLINT, this, "入学(职)年份");

    /**
     * The column <code>user_for_admin.department</code>. 所在部门
     */
    public final TableField<UserForAdminRecord, String> DEPARTMENT = createField(DSL.name("department"), SQLDataType.VARCHAR(20), this, "所在部门");

    /**
     * The column <code>user_for_admin.comment</code>. 备注
     */
    public final TableField<UserForAdminRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "备注");

    /**
     * The column <code>user_for_admin.ip_creation</code>. 创建时IP
     */
    public final TableField<UserForAdminRecord, String> IP_CREATION = createField(DSL.name("ip_creation"), SQLDataType.VARCHAR(45).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "创建时IP");

    /**
     * The column <code>user_for_admin.ip_login</code>. 上次登录IP
     */
    public final TableField<UserForAdminRecord, String> IP_LOGIN = createField(DSL.name("ip_login"), SQLDataType.VARCHAR(45).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "上次登录IP");

    private UserForAdmin(Name alias, Table<UserForAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserForAdmin(Name alias, Table<UserForAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `user_for_admin` as "));
    }

    /**
     * Create an aliased <code>user_for_admin</code> table reference
     */
    public UserForAdmin(String alias) {
        this(DSL.name(alias), USER_FOR_ADMIN);
    }

    /**
     * Create an aliased <code>user_for_admin</code> table reference
     */
    public UserForAdmin(Name alias) {
        this(alias, USER_FOR_ADMIN);
    }

    /**
     * Create a <code>user_for_admin</code> table reference
     */
    public UserForAdmin() {
        this(DSL.name("user_for_admin"), null);
    }

    public <O extends Record> UserForAdmin(Table<O> child, ForeignKey<O, UserForAdminRecord> key) {
        super(child, key, USER_FOR_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UserForAdmin as(String alias) {
        return new UserForAdmin(DSL.name(alias), this);
    }

    @Override
    public UserForAdmin as(Name alias) {
        return new UserForAdmin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserForAdmin rename(String name) {
        return new UserForAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserForAdmin rename(Name name) {
        return new UserForAdmin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, String, String, String, String, Byte, String, Timestamp, Long, Integer, Long, Short, String, String, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
