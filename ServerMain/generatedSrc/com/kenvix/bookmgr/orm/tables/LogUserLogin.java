/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.Keys;
import com.kenvix.bookmgr.orm.tables.records.LogUserLoginRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 用户登录日志（不可修改和删除）
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogUserLogin extends TableImpl<LogUserLoginRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>log_user_login</code>
     */
    public static final LogUserLogin LOG_USER_LOGIN = new LogUserLogin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogUserLoginRecord> getRecordType() {
        return LogUserLoginRecord.class;
    }

    /**
     * The column <code>log_user_login.id</code>.
     */
    public final TableField<LogUserLoginRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>log_user_login.uid</code>. 用户UID
     */
    public final TableField<LogUserLoginRecord, Long> UID = createField(DSL.name("uid"), SQLDataType.BIGINT.nullable(false), this, "用户UID");

    /**
     * The column <code>log_user_login.time</code>. 登录时间
     */
    public final TableField<LogUserLoginRecord, Timestamp> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMP(0).nullable(false), this, "登录时间");

    /**
     * The column <code>log_user_login.ip</code>. 登录IP
     */
    public final TableField<LogUserLoginRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(45).nullable(false), this, "登录IP");

    /**
     * The column <code>log_user_login.useragent</code>. 用户代理
     */
    public final TableField<LogUserLoginRecord, String> USERAGENT = createField(DSL.name("useragent"), SQLDataType.CLOB, this, "用户代理");

    private LogUserLogin(Name alias, Table<LogUserLoginRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogUserLogin(Name alias, Table<LogUserLoginRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户登录日志（不可修改和删除）"), TableOptions.table());
    }

    /**
     * Create an aliased <code>log_user_login</code> table reference
     */
    public LogUserLogin(String alias) {
        this(DSL.name(alias), LOG_USER_LOGIN);
    }

    /**
     * Create an aliased <code>log_user_login</code> table reference
     */
    public LogUserLogin(Name alias) {
        this(alias, LOG_USER_LOGIN);
    }

    /**
     * Create a <code>log_user_login</code> table reference
     */
    public LogUserLogin() {
        this(DSL.name("log_user_login"), null);
    }

    public <O extends Record> LogUserLogin(Table<O> child, ForeignKey<O, LogUserLoginRecord> key) {
        super(child, key, LOG_USER_LOGIN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<LogUserLoginRecord, Long> getIdentity() {
        return (Identity<LogUserLoginRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LogUserLoginRecord> getPrimaryKey() {
        return Keys.KEY_LOG_USER_LOGIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<LogUserLoginRecord>> getKeys() {
        return Arrays.<UniqueKey<LogUserLoginRecord>>asList(Keys.KEY_LOG_USER_LOGIN_PRIMARY);
    }

    @Override
    public LogUserLogin as(String alias) {
        return new LogUserLogin(DSL.name(alias), this);
    }

    @Override
    public LogUserLogin as(Name alias) {
        return new LogUserLogin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogUserLogin rename(String name) {
        return new LogUserLogin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogUserLogin rename(Name name) {
        return new LogUserLogin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Timestamp, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
