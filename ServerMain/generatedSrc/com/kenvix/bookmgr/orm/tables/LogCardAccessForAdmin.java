/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.tables.records.LogCardAccessForAdminRecord;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogCardAccessForAdmin extends TableImpl<LogCardAccessForAdminRecord> {

    private static final long serialVersionUID = -748471790;

    /**
     * The reference instance of <code>log_card_access_for_admin</code>
     */
    public static final LogCardAccessForAdmin LOG_CARD_ACCESS_FOR_ADMIN = new LogCardAccessForAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogCardAccessForAdminRecord> getRecordType() {
        return LogCardAccessForAdminRecord.class;
    }

    /**
     * The column <code>log_card_access_for_admin.serial_id</code>. 卡序列号
     */
    public final TableField<LogCardAccessForAdminRecord, Long> SERIAL_ID = createField(DSL.name("serial_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "卡序列号");

    /**
     * The column <code>log_card_access_for_admin.card_serial_id</code>. 卡片序列号
     */
    public final TableField<LogCardAccessForAdminRecord, Long> CARD_SERIAL_ID = createField(DSL.name("card_serial_id"), org.jooq.impl.SQLDataType.BIGINT, this, "卡片序列号");

    /**
     * The column <code>log_card_access_for_admin.uid</code>. 用户UID
     */
    public final TableField<LogCardAccessForAdminRecord, Long> UID = createField(DSL.name("uid"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "用户UID");

    /**
     * The column <code>log_card_access_for_admin.time</code>. 刷卡时间
     */
    public final TableField<LogCardAccessForAdminRecord, Timestamp> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "刷卡时间");

    /**
     * The column <code>log_card_access_for_admin.machine_id</code>. 刷卡机器编号
     */
    public final TableField<LogCardAccessForAdminRecord, Integer> MACHINE_ID = createField(DSL.name("machine_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "刷卡机器编号");

    /**
     * The column <code>log_card_access_for_admin.email</code>. 电子邮箱
     */
    public final TableField<LogCardAccessForAdminRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "电子邮箱");

    /**
     * The column <code>log_card_access_for_admin.real_name</code>. 真实姓名
     */
    public final TableField<LogCardAccessForAdminRecord, String> REAL_NAME = createField(DSL.name("real_name"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "真实姓名");

    /**
     * Create a <code>log_card_access_for_admin</code> table reference
     */
    public LogCardAccessForAdmin() {
        this(DSL.name("log_card_access_for_admin"), null);
    }

    /**
     * Create an aliased <code>log_card_access_for_admin</code> table reference
     */
    public LogCardAccessForAdmin(String alias) {
        this(DSL.name(alias), LOG_CARD_ACCESS_FOR_ADMIN);
    }

    /**
     * Create an aliased <code>log_card_access_for_admin</code> table reference
     */
    public LogCardAccessForAdmin(Name alias) {
        this(alias, LOG_CARD_ACCESS_FOR_ADMIN);
    }

    private LogCardAccessForAdmin(Name alias, Table<LogCardAccessForAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogCardAccessForAdmin(Name alias, Table<LogCardAccessForAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `log_card_access_for_admin` as select `book`.`log_card_access`.`serial_id` AS `serial_id`,`book`.`user_extra`.`card_serial_id` AS `card_serial_id`,`book`.`user`.`uid` AS `uid`,`book`.`log_card_access`.`time` AS `time`,`book`.`log_card_access`.`machine_id` AS `machine_id`,`book`.`user`.`email` AS `email`,`book`.`user`.`real_name` AS `real_name` from ((`book`.`log_card_access` join `book`.`user_extra` on((`book`.`log_card_access`.`serial_id` = `book`.`user_extra`.`card_serial_id`))) join `book`.`user` on(((`book`.`user_extra`.`uid` = `book`.`user`.`uid`) and (`book`.`user_extra`.`uid` = `book`.`user`.`uid`))))"));
    }

    public <O extends Record> LogCardAccessForAdmin(Table<O> child, ForeignKey<O, LogCardAccessForAdminRecord> key) {
        super(child, key, LOG_CARD_ACCESS_FOR_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public LogCardAccessForAdmin as(String alias) {
        return new LogCardAccessForAdmin(DSL.name(alias), this);
    }

    @Override
    public LogCardAccessForAdmin as(Name alias) {
        return new LogCardAccessForAdmin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogCardAccessForAdmin rename(String name) {
        return new LogCardAccessForAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogCardAccessForAdmin rename(Name name) {
        return new LogCardAccessForAdmin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Timestamp, Integer, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
