/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.Keys;
import com.kenvix.bookmgr.orm.tables.records.BookAuthorMapRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 书籍-作者关系映射表
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookAuthorMap extends TableImpl<BookAuthorMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>book_author_map</code>
     */
    public static final BookAuthorMap BOOK_AUTHOR_MAP = new BookAuthorMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookAuthorMapRecord> getRecordType() {
        return BookAuthorMapRecord.class;
    }

    /**
     * The column <code>book_author_map.book_id</code>. 书籍ID
     */
    public final TableField<BookAuthorMapRecord, Long> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINT.nullable(false), this, "书籍ID");

    /**
     * The column <code>book_author_map.author_id</code>. 作者ID
     */
    public final TableField<BookAuthorMapRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "作者ID");

    private BookAuthorMap(Name alias, Table<BookAuthorMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookAuthorMap(Name alias, Table<BookAuthorMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("书籍-作者关系映射表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>book_author_map</code> table reference
     */
    public BookAuthorMap(String alias) {
        this(DSL.name(alias), BOOK_AUTHOR_MAP);
    }

    /**
     * Create an aliased <code>book_author_map</code> table reference
     */
    public BookAuthorMap(Name alias) {
        this(alias, BOOK_AUTHOR_MAP);
    }

    /**
     * Create a <code>book_author_map</code> table reference
     */
    public BookAuthorMap() {
        this(DSL.name("book_author_map"), null);
    }

    public <O extends Record> BookAuthorMap(Table<O> child, ForeignKey<O, BookAuthorMapRecord> key) {
        super(child, key, BOOK_AUTHOR_MAP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BookAuthorMapRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_AUTHOR_MAP_PRIMARY;
    }

    @Override
    public List<UniqueKey<BookAuthorMapRecord>> getKeys() {
        return Arrays.<UniqueKey<BookAuthorMapRecord>>asList(Keys.KEY_BOOK_AUTHOR_MAP_PRIMARY);
    }

    @Override
    public List<ForeignKey<BookAuthorMapRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BookAuthorMapRecord, ?>>asList(Keys.FK_BOOK_AUTHOR_MAP_BOOK_ID, Keys.FK_BOOK_AUTHOR_MAP_AUTHOR_ID);
    }

    public Book book() {
        return new Book(this, Keys.FK_BOOK_AUTHOR_MAP_BOOK_ID);
    }

    public Author author() {
        return new Author(this, Keys.FK_BOOK_AUTHOR_MAP_AUTHOR_ID);
    }

    @Override
    public BookAuthorMap as(String alias) {
        return new BookAuthorMap(DSL.name(alias), this);
    }

    @Override
    public BookAuthorMap as(Name alias) {
        return new BookAuthorMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookAuthorMap rename(String name) {
        return new BookAuthorMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookAuthorMap rename(Name name) {
        return new BookAuthorMap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
