/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.Indexes;
import com.kenvix.bookmgr.orm.Keys;
import com.kenvix.bookmgr.orm.enums.LogSystemLevel;
import com.kenvix.bookmgr.orm.tables.records.LogSystemRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 系统日志
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogSystem extends TableImpl<LogSystemRecord> {

    private static final long serialVersionUID = 739018451;

    /**
     * The reference instance of <code>log_system</code>
     */
    public static final LogSystem LOG_SYSTEM = new LogSystem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogSystemRecord> getRecordType() {
        return LogSystemRecord.class;
    }

    /**
     * The column <code>log_system.id</code>.
     */
    public final TableField<LogSystemRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>log_system.source</code>. 日志来源
     */
    public final TableField<LogSystemRecord, String> SOURCE = createField(DSL.name("source"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "日志来源");

    /**
     * The column <code>log_system.level</code>. 日志级别
     */
    public final TableField<LogSystemRecord, LogSystemLevel> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(com.kenvix.bookmgr.orm.enums.LogSystemLevel.class), this, "日志级别");

    /**
     * The column <code>log_system.time</code>. 发生事件
     */
    public final TableField<LogSystemRecord, Timestamp> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "发生事件");

    /**
     * The column <code>log_system.message</code>. 消息
     */
    public final TableField<LogSystemRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "消息");

    /**
     * The column <code>log_system.exception</code>. 日志异常类型（简化名）
     */
    public final TableField<LogSystemRecord, String> EXCEPTION = createField(DSL.name("exception"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "日志异常类型（简化名）");

    /**
     * Create a <code>log_system</code> table reference
     */
    public LogSystem() {
        this(DSL.name("log_system"), null);
    }

    /**
     * Create an aliased <code>log_system</code> table reference
     */
    public LogSystem(String alias) {
        this(DSL.name(alias), LOG_SYSTEM);
    }

    /**
     * Create an aliased <code>log_system</code> table reference
     */
    public LogSystem(Name alias) {
        this(alias, LOG_SYSTEM);
    }

    private LogSystem(Name alias, Table<LogSystemRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogSystem(Name alias, Table<LogSystemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("系统日志"), TableOptions.table());
    }

    public <O extends Record> LogSystem(Table<O> child, ForeignKey<O, LogSystemRecord> key) {
        super(child, key, LOG_SYSTEM);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOG_SYSTEM_FK_LOG_SYSTEM_TYPE);
    }

    @Override
    public Identity<LogSystemRecord, Long> getIdentity() {
        return Keys.IDENTITY_LOG_SYSTEM;
    }

    @Override
    public UniqueKey<LogSystemRecord> getPrimaryKey() {
        return Keys.KEY_LOG_SYSTEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<LogSystemRecord>> getKeys() {
        return Arrays.<UniqueKey<LogSystemRecord>>asList(Keys.KEY_LOG_SYSTEM_PRIMARY);
    }

    @Override
    public LogSystem as(String alias) {
        return new LogSystem(DSL.name(alias), this);
    }

    @Override
    public LogSystem as(Name alias) {
        return new LogSystem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogSystem rename(String name) {
        return new LogSystem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogSystem rename(Name name) {
        return new LogSystem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, LogSystemLevel, Timestamp, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
