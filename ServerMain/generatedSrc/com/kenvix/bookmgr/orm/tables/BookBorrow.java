/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.Keys;
import com.kenvix.bookmgr.orm.tables.records.BookBorrowRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 借书表
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookBorrow extends TableImpl<BookBorrowRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>book_borrow</code>
     */
    public static final BookBorrow BOOK_BORROW = new BookBorrow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookBorrowRecord> getRecordType() {
        return BookBorrowRecord.class;
    }

    /**
     * The column <code>book_borrow.id</code>.
     */
    public final TableField<BookBorrowRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>book_borrow.book_id</code>. 书籍ID
     */
    public final TableField<BookBorrowRecord, Long> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINT.nullable(false), this, "书籍ID");

    /**
     * The column <code>book_borrow.borrower_uid</code>. 借书人UID
     */
    public final TableField<BookBorrowRecord, Long> BORROWER_UID = createField(DSL.name("borrower_uid"), SQLDataType.BIGINT.nullable(false), this, "借书人UID");

    /**
     * The column <code>book_borrow.borrowed_at</code>. 借书日期
     */
    public final TableField<BookBorrowRecord, Timestamp> BORROWED_AT = createField(DSL.name("borrowed_at"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.TIMESTAMP)), this, "借书日期");

    /**
     * The column <code>book_borrow.expected_returned_at</code>. 期望的还书日期
     */
    public final TableField<BookBorrowRecord, Timestamp> EXPECTED_RETURNED_AT = createField(DSL.name("expected_returned_at"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.TIMESTAMP)), this, "期望的还书日期");

    /**
     * The column <code>book_borrow.actual_returned_at</code>. 实际还书日期，NULL为没还
     */
    public final TableField<BookBorrowRecord, Timestamp> ACTUAL_RETURNED_AT = createField(DSL.name("actual_returned_at"), SQLDataType.TIMESTAMP(0), this, "实际还书日期，NULL为没还");

    /**
     * The column <code>book_borrow.renew_num</code>. 续借次数
     */
    public final TableField<BookBorrowRecord, Short> RENEW_NUM = createField(DSL.name("renew_num"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "续借次数");

    private BookBorrow(Name alias, Table<BookBorrowRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookBorrow(Name alias, Table<BookBorrowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("借书表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>book_borrow</code> table reference
     */
    public BookBorrow(String alias) {
        this(DSL.name(alias), BOOK_BORROW);
    }

    /**
     * Create an aliased <code>book_borrow</code> table reference
     */
    public BookBorrow(Name alias) {
        this(alias, BOOK_BORROW);
    }

    /**
     * Create a <code>book_borrow</code> table reference
     */
    public BookBorrow() {
        this(DSL.name("book_borrow"), null);
    }

    public <O extends Record> BookBorrow(Table<O> child, ForeignKey<O, BookBorrowRecord> key) {
        super(child, key, BOOK_BORROW);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<BookBorrowRecord, Long> getIdentity() {
        return (Identity<BookBorrowRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookBorrowRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_BORROW_PRIMARY;
    }

    @Override
    public List<UniqueKey<BookBorrowRecord>> getKeys() {
        return Arrays.<UniqueKey<BookBorrowRecord>>asList(Keys.KEY_BOOK_BORROW_PRIMARY);
    }

    @Override
    public List<ForeignKey<BookBorrowRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BookBorrowRecord, ?>>asList(Keys.FK_BOOK_ID, Keys.FK_BORROWER_UID);
    }

    public Book book() {
        return new Book(this, Keys.FK_BOOK_ID);
    }

    public User user() {
        return new User(this, Keys.FK_BORROWER_UID);
    }

    @Override
    public BookBorrow as(String alias) {
        return new BookBorrow(DSL.name(alias), this);
    }

    @Override
    public BookBorrow as(Name alias) {
        return new BookBorrow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookBorrow rename(String name) {
        return new BookBorrow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookBorrow rename(Name name) {
        return new BookBorrow(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Timestamp, Timestamp, Timestamp, Short> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
