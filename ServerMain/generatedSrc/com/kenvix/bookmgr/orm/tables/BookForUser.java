/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.tables.records.BookForUserRecord;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookForUser extends TableImpl<BookForUserRecord> {

    private static final long serialVersionUID = -956815363;

    /**
     * The reference instance of <code>book_for_user</code>
     */
    public static final BookForUser BOOK_FOR_USER = new BookForUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookForUserRecord> getRecordType() {
        return BookForUserRecord.class;
    }

    /**
     * The column <code>book_for_user.id</code>. 书本ID
     */
    public final TableField<BookForUserRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "书本ID");

    /**
     * The column <code>book_for_user.title</code>. 书籍标题
     */
    public final TableField<BookForUserRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "书籍标题");

    /**
     * The column <code>book_for_user.description</code>. 书籍概述
     */
    public final TableField<BookForUserRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "书籍概述");

    /**
     * The column <code>book_for_user.publisher_id</code>. 出版社ID
     */
    public final TableField<BookForUserRecord, Long> PUBLISHER_ID = createField(DSL.name("publisher_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "出版社ID");

    /**
     * The column <code>book_for_user.created_at</code>. 条目创建时间
     */
    public final TableField<BookForUserRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "条目创建时间");

    /**
     * The column <code>book_for_user.num_total</code>. 书籍总数
     */
    public final TableField<BookForUserRecord, Integer> NUM_TOTAL = createField(DSL.name("num_total"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "书籍总数");

    /**
     * The column <code>book_for_user.num_available</code>. 可用书籍数
     */
    public final TableField<BookForUserRecord, Integer> NUM_AVAILABLE = createField(DSL.name("num_available"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "可用书籍数");

    /**
     * The column <code>book_for_user.status</code>. 书籍状态
     */
    public final TableField<BookForUserRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "书籍状态");

    /**
     * The column <code>book_for_user.publisher_name</code>. 出版社名称
     */
    public final TableField<BookForUserRecord, String> PUBLISHER_NAME = createField(DSL.name("publisher_name"), org.jooq.impl.SQLDataType.VARCHAR(80).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "出版社名称");

    /**
     * The column <code>book_for_user.publisher_description</code>. 出版社简介
     */
    public final TableField<BookForUserRecord, String> PUBLISHER_DESCRIPTION = createField(DSL.name("publisher_description"), org.jooq.impl.SQLDataType.CLOB, this, "出版社简介");

    /**
     * Create a <code>book_for_user</code> table reference
     */
    public BookForUser() {
        this(DSL.name("book_for_user"), null);
    }

    /**
     * Create an aliased <code>book_for_user</code> table reference
     */
    public BookForUser(String alias) {
        this(DSL.name(alias), BOOK_FOR_USER);
    }

    /**
     * Create an aliased <code>book_for_user</code> table reference
     */
    public BookForUser(Name alias) {
        this(alias, BOOK_FOR_USER);
    }

    private BookForUser(Name alias, Table<BookForUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookForUser(Name alias, Table<BookForUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `book_for_user` as select `book`.`book`.`id` AS `id`,`book`.`book`.`title` AS `title`,`book`.`book`.`description` AS `description`,`book`.`book`.`publisher_id` AS `publisher_id`,`book`.`book`.`created_at` AS `created_at`,`book`.`book`.`num_total` AS `num_total`,`book`.`book`.`num_available` AS `num_available`,`book`.`book`.`status` AS `status`,`book`.`publisher`.`name` AS `publisher_name`,`book`.`publisher`.`description` AS `publisher_description` from (`book`.`book` join `book`.`publisher` on((`book`.`book`.`publisher_id` = `book`.`publisher`.`id`))) where (`book`.`book`.`status` >= 4)"));
    }

    public <O extends Record> BookForUser(Table<O> child, ForeignKey<O, BookForUserRecord> key) {
        super(child, key, BOOK_FOR_USER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public BookForUser as(String alias) {
        return new BookForUser(DSL.name(alias), this);
    }

    @Override
    public BookForUser as(Name alias) {
        return new BookForUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookForUser rename(String name) {
        return new BookForUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookForUser rename(Name name) {
        return new BookForUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, Long, Timestamp, Integer, Integer, Byte, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
