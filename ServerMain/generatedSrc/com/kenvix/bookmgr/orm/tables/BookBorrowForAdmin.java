/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.tables.records.BookBorrowForAdminRecord;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookBorrowForAdmin extends TableImpl<BookBorrowForAdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>book_borrow_for_admin</code>
     */
    public static final BookBorrowForAdmin BOOK_BORROW_FOR_ADMIN = new BookBorrowForAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookBorrowForAdminRecord> getRecordType() {
        return BookBorrowForAdminRecord.class;
    }

    /**
     * The column <code>book_borrow_for_admin.book_id</code>. 书本ID
     */
    public final TableField<BookBorrowForAdminRecord, Long> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "书本ID");

    /**
     * The column <code>book_borrow_for_admin.book_title</code>. 书籍标题
     */
    public final TableField<BookBorrowForAdminRecord, String> BOOK_TITLE = createField(DSL.name("book_title"), SQLDataType.VARCHAR(120).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "书籍标题");

    /**
     * The column <code>book_borrow_for_admin.book_publisher_id</code>. 出版社ID
     */
    public final TableField<BookBorrowForAdminRecord, Long> BOOK_PUBLISHER_ID = createField(DSL.name("book_publisher_id"), SQLDataType.BIGINT.nullable(false), this, "出版社ID");

    /**
     * The column <code>book_borrow_for_admin.book_created_at</code>. 条目创建时间
     */
    public final TableField<BookBorrowForAdminRecord, Timestamp> BOOK_CREATED_AT = createField(DSL.name("book_created_at"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.TIMESTAMP)), this, "条目创建时间");

    /**
     * The column <code>book_borrow_for_admin.book_num_total</code>. 书籍总数
     */
    public final TableField<BookBorrowForAdminRecord, Integer> BOOK_NUM_TOTAL = createField(DSL.name("book_num_total"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "书籍总数");

    /**
     * The column <code>book_borrow_for_admin.book_num_available</code>. 可用书籍数
     */
    public final TableField<BookBorrowForAdminRecord, Integer> BOOK_NUM_AVAILABLE = createField(DSL.name("book_num_available"), SQLDataType.INTEGER.nullable(false), this, "可用书籍数");

    /**
     * The column <code>book_borrow_for_admin.book_status</code>. 书籍状态
     */
    public final TableField<BookBorrowForAdminRecord, Byte> BOOK_STATUS = createField(DSL.name("book_status"), SQLDataType.TINYINT.nullable(false), this, "书籍状态");

    /**
     * The column <code>book_borrow_for_admin.book_publisher_name</code>. 出版社名称
     */
    public final TableField<BookBorrowForAdminRecord, String> BOOK_PUBLISHER_NAME = createField(DSL.name("book_publisher_name"), SQLDataType.VARCHAR(80).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "出版社名称");

    /**
     * The column <code>book_borrow_for_admin.book_author_id</code>. 作者ID
     */
    public final TableField<BookBorrowForAdminRecord, Long> BOOK_AUTHOR_ID = createField(DSL.name("book_author_id"), SQLDataType.BIGINT, this, "作者ID");

    /**
     * The column <code>book_borrow_for_admin.book_author_name</code>.
     */
    public final TableField<BookBorrowForAdminRecord, String> BOOK_AUTHOR_NAME = createField(DSL.name("book_author_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>book_borrow_for_admin.book_type_id</code>. 图书类型ID
     */
    public final TableField<BookBorrowForAdminRecord, Integer> BOOK_TYPE_ID = createField(DSL.name("book_type_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "图书类型ID");

    /**
     * The column <code>book_borrow_for_admin.book_type_name</code>. 类目名称
     */
    public final TableField<BookBorrowForAdminRecord, String> BOOK_TYPE_NAME = createField(DSL.name("book_type_name"), SQLDataType.VARCHAR(50).nullable(false), this, "类目名称");

    /**
     * The column <code>book_borrow_for_admin.book_status_description</code>.
     */
    public final TableField<BookBorrowForAdminRecord, String> BOOK_STATUS_DESCRIPTION = createField(DSL.name("book_status_description"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>book_borrow_for_admin.borrower_uid</code>. 借书人UID
     */
    public final TableField<BookBorrowForAdminRecord, Long> BORROWER_UID = createField(DSL.name("borrower_uid"), SQLDataType.BIGINT.nullable(false), this, "借书人UID");

    /**
     * The column <code>book_borrow_for_admin.borrowed_at</code>. 借书日期
     */
    public final TableField<BookBorrowForAdminRecord, Timestamp> BORROWED_AT = createField(DSL.name("borrowed_at"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.TIMESTAMP)), this, "借书日期");

    /**
     * The column <code>book_borrow_for_admin.expected_returned_at</code>. 期望的还书日期
     */
    public final TableField<BookBorrowForAdminRecord, Timestamp> EXPECTED_RETURNED_AT = createField(DSL.name("expected_returned_at"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.TIMESTAMP)), this, "期望的还书日期");

    /**
     * The column <code>book_borrow_for_admin.actual_returned_at</code>. 实际还书日期，NULL为没还
     */
    public final TableField<BookBorrowForAdminRecord, Timestamp> ACTUAL_RETURNED_AT = createField(DSL.name("actual_returned_at"), SQLDataType.TIMESTAMP(0), this, "实际还书日期，NULL为没还");

    /**
     * The column <code>book_borrow_for_admin.renew_num</code>. 续借次数
     */
    public final TableField<BookBorrowForAdminRecord, Short> RENEW_NUM = createField(DSL.name("renew_num"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "续借次数");

    /**
     * The column <code>book_borrow_for_admin.borrow_id</code>.
     */
    public final TableField<BookBorrowForAdminRecord, Long> BORROW_ID = createField(DSL.name("borrow_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>book_borrow_for_admin.borrower_real_name</code>. 真实姓名
     */
    public final TableField<BookBorrowForAdminRecord, String> BORROWER_REAL_NAME = createField(DSL.name("borrower_real_name"), SQLDataType.VARCHAR(30).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "真实姓名");

    /**
     * The column <code>book_borrow_for_admin.borrower_email</code>. 电子邮箱
     */
    public final TableField<BookBorrowForAdminRecord, String> BORROWER_EMAIL = createField(DSL.name("borrower_email"), SQLDataType.VARCHAR(60).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "电子邮箱");

    /**
     * The column <code>book_borrow_for_admin.borrower_serial_id</code>. 工号/序列号
     */
    public final TableField<BookBorrowForAdminRecord, String> BORROWER_SERIAL_ID = createField(DSL.name("borrower_serial_id"), SQLDataType.VARCHAR(15).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "工号/序列号");

    private BookBorrowForAdmin(Name alias, Table<BookBorrowForAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookBorrowForAdmin(Name alias, Table<BookBorrowForAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `book_borrow_for_admin` as "));
    }

    /**
     * Create an aliased <code>book_borrow_for_admin</code> table reference
     */
    public BookBorrowForAdmin(String alias) {
        this(DSL.name(alias), BOOK_BORROW_FOR_ADMIN);
    }

    /**
     * Create an aliased <code>book_borrow_for_admin</code> table reference
     */
    public BookBorrowForAdmin(Name alias) {
        this(alias, BOOK_BORROW_FOR_ADMIN);
    }

    /**
     * Create a <code>book_borrow_for_admin</code> table reference
     */
    public BookBorrowForAdmin() {
        this(DSL.name("book_borrow_for_admin"), null);
    }

    public <O extends Record> BookBorrowForAdmin(Table<O> child, ForeignKey<O, BookBorrowForAdminRecord> key) {
        super(child, key, BOOK_BORROW_FOR_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public BookBorrowForAdmin as(String alias) {
        return new BookBorrowForAdmin(DSL.name(alias), this);
    }

    @Override
    public BookBorrowForAdmin as(Name alias) {
        return new BookBorrowForAdmin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookBorrowForAdmin rename(String name) {
        return new BookBorrowForAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookBorrowForAdmin rename(Name name) {
        return new BookBorrowForAdmin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, String, Long, Timestamp, Integer, Integer, Byte, String, Long, String, Integer, String, String, Long, Timestamp, Timestamp, Timestamp, Short, Long, String, String, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
