/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.tables.records.BookBorrowForAdminRecord;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookBorrowForAdmin extends TableImpl<BookBorrowForAdminRecord> {

    private static final long serialVersionUID = 1805160588;

    /**
     * The reference instance of <code>book_borrow_for_admin</code>
     */
    public static final BookBorrowForAdmin BOOK_BORROW_FOR_ADMIN = new BookBorrowForAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookBorrowForAdminRecord> getRecordType() {
        return BookBorrowForAdminRecord.class;
    }

    /**
     * The column <code>book_borrow_for_admin.book_id</code>. 书籍ID
     */
    public final TableField<BookBorrowForAdminRecord, Long> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "书籍ID");

    /**
     * The column <code>book_borrow_for_admin.book_title</code>. 书籍标题
     */
    public final TableField<BookBorrowForAdminRecord, String> BOOK_TITLE = createField(DSL.name("book_title"), org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "书籍标题");

    /**
     * The column <code>book_borrow_for_admin.borrower_uid</code>. 借书人UID
     */
    public final TableField<BookBorrowForAdminRecord, Long> BORROWER_UID = createField(DSL.name("borrower_uid"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "借书人UID");

    /**
     * The column <code>book_borrow_for_admin.borrowed_at</code>. 借书日期
     */
    public final TableField<BookBorrowForAdminRecord, Timestamp> BORROWED_AT = createField(DSL.name("borrowed_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "借书日期");

    /**
     * The column <code>book_borrow_for_admin.expected_returned_at</code>. 期望的还书日期
     */
    public final TableField<BookBorrowForAdminRecord, Timestamp> EXPECTED_RETURNED_AT = createField(DSL.name("expected_returned_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "期望的还书日期");

    /**
     * The column <code>book_borrow_for_admin.actual_returned_at</code>. 实际还书日期，NULL为没还
     */
    public final TableField<BookBorrowForAdminRecord, Timestamp> ACTUAL_RETURNED_AT = createField(DSL.name("actual_returned_at"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "实际还书日期，NULL为没还");

    /**
     * The column <code>book_borrow_for_admin.borrower_real_name</code>. 真实姓名
     */
    public final TableField<BookBorrowForAdminRecord, String> BORROWER_REAL_NAME = createField(DSL.name("borrower_real_name"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "真实姓名");

    /**
     * The column <code>book_borrow_for_admin.borrower_serial_id</code>. 工号/序列号
     */
    public final TableField<BookBorrowForAdminRecord, String> BORROWER_SERIAL_ID = createField(DSL.name("borrower_serial_id"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "工号/序列号");

    /**
     * The column <code>book_borrow_for_admin.renew_num</code>. 续借次数
     */
    public final TableField<BookBorrowForAdminRecord, Short> RENEW_NUM = createField(DSL.name("renew_num"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "续借次数");

    /**
     * Create a <code>book_borrow_for_admin</code> table reference
     */
    public BookBorrowForAdmin() {
        this(DSL.name("book_borrow_for_admin"), null);
    }

    /**
     * Create an aliased <code>book_borrow_for_admin</code> table reference
     */
    public BookBorrowForAdmin(String alias) {
        this(DSL.name(alias), BOOK_BORROW_FOR_ADMIN);
    }

    /**
     * Create an aliased <code>book_borrow_for_admin</code> table reference
     */
    public BookBorrowForAdmin(Name alias) {
        this(alias, BOOK_BORROW_FOR_ADMIN);
    }

    private BookBorrowForAdmin(Name alias, Table<BookBorrowForAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookBorrowForAdmin(Name alias, Table<BookBorrowForAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `book_borrow_for_admin` as select `book`.`book_borrow`.`book_id` AS `book_id`,`book`.`book`.`title` AS `book_title`,`book`.`book_borrow`.`borrower_uid` AS `borrower_uid`,`book`.`book_borrow`.`borrowed_at` AS `borrowed_at`,`book`.`book_borrow`.`expected_returned_at` AS `expected_returned_at`,`book`.`book_borrow`.`actual_returned_at` AS `actual_returned_at`,`book`.`user`.`real_name` AS `borrower_real_name`,`book`.`user`.`serial_id` AS `borrower_serial_id`,`book`.`book_borrow`.`renew_num` AS `renew_num` from ((`book`.`book` join `book`.`book_borrow` on((`book`.`book`.`id` = `book`.`book_borrow`.`book_id`))) join `book`.`user` on((`book`.`book_borrow`.`borrower_uid` = `book`.`user`.`uid`)))"));
    }

    public <O extends Record> BookBorrowForAdmin(Table<O> child, ForeignKey<O, BookBorrowForAdminRecord> key) {
        super(child, key, BOOK_BORROW_FOR_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public BookBorrowForAdmin as(String alias) {
        return new BookBorrowForAdmin(DSL.name(alias), this);
    }

    @Override
    public BookBorrowForAdmin as(Name alias) {
        return new BookBorrowForAdmin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookBorrowForAdmin rename(String name) {
        return new BookBorrowForAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookBorrowForAdmin rename(Name name) {
        return new BookBorrowForAdmin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, Long, Timestamp, Timestamp, Timestamp, String, String, Short> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
