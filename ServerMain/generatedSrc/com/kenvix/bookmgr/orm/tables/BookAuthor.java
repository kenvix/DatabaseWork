/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.tables.records.BookAuthorRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookAuthor extends TableImpl<BookAuthorRecord> {

    private static final long serialVersionUID = -1197249920;

    /**
     * The reference instance of <code>book_author</code>
     */
    public static final BookAuthor BOOK_AUTHOR = new BookAuthor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookAuthorRecord> getRecordType() {
        return BookAuthorRecord.class;
    }

    /**
     * The column <code>book_author.book_id</code>. 书籍ID
     */
    public final TableField<BookAuthorRecord, Long> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "书籍ID");

    /**
     * The column <code>book_author.author_id</code>. 作者ID
     */
    public final TableField<BookAuthorRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "作者ID");

    /**
     * The column <code>book_author.author_name</code>. 作者通用名称，有索引，可重名
     */
    public final TableField<BookAuthorRecord, String> AUTHOR_NAME = createField(DSL.name("author_name"), org.jooq.impl.SQLDataType.VARCHAR(35).nullable(false), this, "作者通用名称，有索引，可重名");

    /**
     * The column <code>book_author.author_fullname</code>. 作者全名
     */
    public final TableField<BookAuthorRecord, String> AUTHOR_FULLNAME = createField(DSL.name("author_fullname"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "作者全名");

    /**
     * The column <code>book_author.author_country</code>. 作者国籍，使用
ISO 3166-1二位字母代码规范
     */
    public final TableField<BookAuthorRecord, String> AUTHOR_COUNTRY = createField(DSL.name("author_country"), org.jooq.impl.SQLDataType.CHAR(2), this, "作者国籍，使用\r\nISO 3166-1二位字母代码规范");

    /**
     * The column <code>book_author.author_description</code>. 作者简述
     */
    public final TableField<BookAuthorRecord, String> AUTHOR_DESCRIPTION = createField(DSL.name("author_description"), org.jooq.impl.SQLDataType.CLOB, this, "作者简述");

    /**
     * Create a <code>book_author</code> table reference
     */
    public BookAuthor() {
        this(DSL.name("book_author"), null);
    }

    /**
     * Create an aliased <code>book_author</code> table reference
     */
    public BookAuthor(String alias) {
        this(DSL.name(alias), BOOK_AUTHOR);
    }

    /**
     * Create an aliased <code>book_author</code> table reference
     */
    public BookAuthor(Name alias) {
        this(alias, BOOK_AUTHOR);
    }

    private BookAuthor(Name alias, Table<BookAuthorRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookAuthor(Name alias, Table<BookAuthorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `book_author` as select `book`.`book_author_map`.`book_id` AS `book_id`,`book`.`book_author_map`.`author_id` AS `author_id`,`book`.`author`.`name` AS `author_name`,`book`.`author`.`fullname` AS `author_fullname`,`book`.`author`.`country` AS `author_country`,`book`.`author`.`description` AS `author_description` from ((`book`.`book` join `book`.`book_author_map` on((`book`.`book`.`id` = `book`.`book_author_map`.`book_id`))) join `book`.`author` on((`book`.`book_author_map`.`author_id` = `book`.`author`.`id`)))"));
    }

    public <O extends Record> BookAuthor(Table<O> child, ForeignKey<O, BookAuthorRecord> key) {
        super(child, key, BOOK_AUTHOR);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public BookAuthor as(String alias) {
        return new BookAuthor(DSL.name(alias), this);
    }

    @Override
    public BookAuthor as(Name alias) {
        return new BookAuthor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookAuthor rename(String name) {
        return new BookAuthor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookAuthor rename(Name name) {
        return new BookAuthor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
