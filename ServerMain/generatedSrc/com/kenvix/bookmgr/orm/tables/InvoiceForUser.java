/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.tables.records.InvoiceForUserRecord;

import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvoiceForUser extends TableImpl<InvoiceForUserRecord> {

    private static final long serialVersionUID = 83679285;

    /**
     * The reference instance of <code>invoice_for_user</code>
     */
    public static final InvoiceForUser INVOICE_FOR_USER = new InvoiceForUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoiceForUserRecord> getRecordType() {
        return InvoiceForUserRecord.class;
    }

    /**
     * The column <code>invoice_for_user.id</code>. 订单ID
     */
    public final TableField<InvoiceForUserRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "订单ID");

    /**
     * The column <code>invoice_for_user.name</code>. 订单名称
     */
    public final TableField<InvoiceForUserRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "订单名称");

    /**
     * The column <code>invoice_for_user.type</code>. 订单类型
     */
    public final TableField<InvoiceForUserRecord, Short> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "订单类型");

    /**
     * The column <code>invoice_for_user.owner_uid</code>. 付款人UID
     */
    public final TableField<InvoiceForUserRecord, Long> OWNER_UID = createField(DSL.name("owner_uid"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "付款人UID");

    /**
     * The column <code>invoice_for_user.should_pay</code>. 应付金额
     */
    public final TableField<InvoiceForUserRecord, Integer> SHOULD_PAY = createField(DSL.name("should_pay"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "应付金额");

    /**
     * The column <code>invoice_for_user.created_at</code>. 创建时间
     */
    public final TableField<InvoiceForUserRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>invoice_for_user.status</code>. 订单状态
     */
    public final TableField<InvoiceForUserRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "订单状态");

    /**
     * The column <code>invoice_for_user.status_description</code>.
     */
    public final TableField<InvoiceForUserRecord, String> STATUS_DESCRIPTION = createField(DSL.name("status_description"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>invoice_for_user.expire_at</code>. 订单过期时间
     */
    public final TableField<InvoiceForUserRecord, Timestamp> EXPIRE_AT = createField(DSL.name("expire_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2038-01-19 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "订单过期时间");

    /**
     * The column <code>invoice_for_user.paid_at</code>. 订单支付时间,NULL为没付
     */
    public final TableField<InvoiceForUserRecord, Timestamp> PAID_AT = createField(DSL.name("paid_at"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "订单支付时间,NULL为没付");

    /**
     * The column <code>invoice_for_user.comment</code>. 订单备注
     */
    public final TableField<InvoiceForUserRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.CLOB, this, "订单备注");

    /**
     * The column <code>invoice_for_user.extra_data</code>. 保留备用。特定订单驱动可读的数据信息
     */
    public final TableField<InvoiceForUserRecord, JSON> EXTRA_DATA = createField(DSL.name("extra_data"), org.jooq.impl.SQLDataType.JSON, this, "保留备用。特定订单驱动可读的数据信息");

    /**
     * The column <code>invoice_for_user.type_description</code>.
     */
    public final TableField<InvoiceForUserRecord, String> TYPE_DESCRIPTION = createField(DSL.name("type_description"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>invoice_for_user.type_driver</code>.
     */
    public final TableField<InvoiceForUserRecord, String> TYPE_DRIVER = createField(DSL.name("type_driver"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * Create a <code>invoice_for_user</code> table reference
     */
    public InvoiceForUser() {
        this(DSL.name("invoice_for_user"), null);
    }

    /**
     * Create an aliased <code>invoice_for_user</code> table reference
     */
    public InvoiceForUser(String alias) {
        this(DSL.name(alias), INVOICE_FOR_USER);
    }

    /**
     * Create an aliased <code>invoice_for_user</code> table reference
     */
    public InvoiceForUser(Name alias) {
        this(alias, INVOICE_FOR_USER);
    }

    private InvoiceForUser(Name alias, Table<InvoiceForUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private InvoiceForUser(Name alias, Table<InvoiceForUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `invoice_for_user` as select `book`.`invoice`.`id` AS `id`,`book`.`invoice`.`name` AS `name`,`book`.`invoice`.`type` AS `type`,`book`.`invoice`.`owner_uid` AS `owner_uid`,`book`.`invoice`.`should_pay` AS `should_pay`,`book`.`invoice`.`created_at` AS `created_at`,`book`.`invoice`.`status` AS `status`,`book`.`invoice_status`.`description` AS `status_description`,`book`.`invoice`.`expire_at` AS `expire_at`,`book`.`invoice`.`paid_at` AS `paid_at`,`book`.`invoice`.`comment` AS `comment`,`book`.`invoice`.`extra_data` AS `extra_data`,`book`.`invoice_type`.`description` AS `type_description`,`book`.`invoice_type`.`driver` AS `type_driver` from ((`book`.`invoice` join `book`.`invoice_status` on((`book`.`invoice`.`status` = `book`.`invoice_status`.`id`))) join `book`.`invoice_type` on((`book`.`invoice`.`type` = `book`.`invoice_type`.`id`)))"));
    }

    public <O extends Record> InvoiceForUser(Table<O> child, ForeignKey<O, InvoiceForUserRecord> key) {
        super(child, key, INVOICE_FOR_USER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public InvoiceForUser as(String alias) {
        return new InvoiceForUser(DSL.name(alias), this);
    }

    @Override
    public InvoiceForUser as(Name alias) {
        return new InvoiceForUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoiceForUser rename(String name) {
        return new InvoiceForUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoiceForUser rename(Name name) {
        return new InvoiceForUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, Short, Long, Integer, Timestamp, Byte, String, Timestamp, Timestamp, String, JSON, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
