/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables.daos;


import com.kenvix.bookmgr.orm.tables.Author;
import com.kenvix.bookmgr.orm.tables.records.AuthorRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 作者表
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorDao extends DAOImpl<AuthorRecord, com.kenvix.bookmgr.orm.tables.pojos.Author, Long> {

    /**
     * Create a new AuthorDao without any configuration
     */
    public AuthorDao() {
        super(Author.AUTHOR, com.kenvix.bookmgr.orm.tables.pojos.Author.class);
    }

    /**
     * Create a new AuthorDao with an attached configuration
     */
    public AuthorDao(Configuration configuration) {
        super(Author.AUTHOR, com.kenvix.bookmgr.orm.tables.pojos.Author.class, configuration);
    }

    @Override
    public Long getId(com.kenvix.bookmgr.orm.tables.pojos.Author object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Author.AUTHOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchById(Long... values) {
        return fetch(Author.AUTHOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.kenvix.bookmgr.orm.tables.pojos.Author fetchOneById(Long value) {
        return fetchOne(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchByName(String... values) {
        return fetch(Author.AUTHOR.NAME, values);
    }

    /**
     * Fetch records that have <code>fullname BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchRangeOfFullname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.FULLNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fullname IN (values)</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchByFullname(String... values) {
        return fetch(Author.AUTHOR.FULLNAME, values);
    }

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchRangeOfCountry(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.COUNTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchByCountry(String... values) {
        return fetch(Author.AUTHOR.COUNTRY, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.Author> fetchByDescription(String... values) {
        return fetch(Author.AUTHOR.DESCRIPTION, values);
    }
}
