/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables.daos;


import com.kenvix.bookmgr.orm.tables.BookAuthorMap;
import com.kenvix.bookmgr.orm.tables.records.BookAuthorMapRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * 书籍-作者关系映射表
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookAuthorMapDao extends DAOImpl<BookAuthorMapRecord, com.kenvix.bookmgr.orm.tables.pojos.BookAuthorMap, Record2<Long, Long>> {

    /**
     * Create a new BookAuthorMapDao without any configuration
     */
    public BookAuthorMapDao() {
        super(BookAuthorMap.BOOK_AUTHOR_MAP, com.kenvix.bookmgr.orm.tables.pojos.BookAuthorMap.class);
    }

    /**
     * Create a new BookAuthorMapDao with an attached configuration
     */
    public BookAuthorMapDao(Configuration configuration) {
        super(BookAuthorMap.BOOK_AUTHOR_MAP, com.kenvix.bookmgr.orm.tables.pojos.BookAuthorMap.class, configuration);
    }

    @Override
    public Record2<Long, Long> getId(com.kenvix.bookmgr.orm.tables.pojos.BookAuthorMap object) {
        return compositeKeyRecord(object.getBookId(), object.getAuthorId());
    }

    /**
     * Fetch records that have <code>book_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.BookAuthorMap> fetchRangeOfBookId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(BookAuthorMap.BOOK_AUTHOR_MAP.BOOK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.BookAuthorMap> fetchByBookId(Long... values) {
        return fetch(BookAuthorMap.BOOK_AUTHOR_MAP.BOOK_ID, values);
    }

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.BookAuthorMap> fetchRangeOfAuthorId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(BookAuthorMap.BOOK_AUTHOR_MAP.AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    public List<com.kenvix.bookmgr.orm.tables.pojos.BookAuthorMap> fetchByAuthorId(Long... values) {
        return fetch(BookAuthorMap.BOOK_AUTHOR_MAP.AUTHOR_ID, values);
    }
}
