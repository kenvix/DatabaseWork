/*
 * This file is generated by jOOQ.
 */
package com.kenvix.bookmgr.orm.tables;


import com.kenvix.bookmgr.orm.DefaultSchema;
import com.kenvix.bookmgr.orm.Keys;
import com.kenvix.bookmgr.orm.tables.records.BookTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 图书类目
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookType extends TableImpl<BookTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>book_type</code>
     */
    public static final BookType BOOK_TYPE = new BookType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookTypeRecord> getRecordType() {
        return BookTypeRecord.class;
    }

    /**
     * The column <code>book_type.id</code>. 图书类目ID
     */
    public final TableField<BookTypeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "图书类目ID");

    /**
     * The column <code>book_type.name</code>. 类目名称
     */
    public final TableField<BookTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "类目名称");

    /**
     * The column <code>book_type.parent_id</code>. 父级图书类目ID
     */
    public final TableField<BookTypeRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "父级图书类目ID");

    private BookType(Name alias, Table<BookTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookType(Name alias, Table<BookTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("图书类目"), TableOptions.table());
    }

    /**
     * Create an aliased <code>book_type</code> table reference
     */
    public BookType(String alias) {
        this(DSL.name(alias), BOOK_TYPE);
    }

    /**
     * Create an aliased <code>book_type</code> table reference
     */
    public BookType(Name alias) {
        this(alias, BOOK_TYPE);
    }

    /**
     * Create a <code>book_type</code> table reference
     */
    public BookType() {
        this(DSL.name("book_type"), null);
    }

    public <O extends Record> BookType(Table<O> child, ForeignKey<O, BookTypeRecord> key) {
        super(child, key, BOOK_TYPE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<BookTypeRecord, Integer> getIdentity() {
        return (Identity<BookTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookTypeRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_TYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<BookTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<BookTypeRecord>>asList(Keys.KEY_BOOK_TYPE_PRIMARY);
    }

    @Override
    public List<ForeignKey<BookTypeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BookTypeRecord, ?>>asList(Keys.FK_BOOK_TYPE_PARENT_ID);
    }

    public BookType bookType() {
        return new BookType(this, Keys.FK_BOOK_TYPE_PARENT_ID);
    }

    @Override
    public BookType as(String alias) {
        return new BookType(DSL.name(alias), this);
    }

    @Override
    public BookType as(Name alias) {
        return new BookType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookType rename(String name) {
        return new BookType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookType rename(Name name) {
        return new BookType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
